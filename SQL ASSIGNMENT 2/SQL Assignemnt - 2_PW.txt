use mavenmovies;

----- Basic Aggregate Functions:
----- Question 1:
---- Retrieve the total number of rentals made in the Sakila database.
---- Hint: Use the COUNT() function.

SELECT COUNT(*) AS total_rentals
FROM rental;

----- Question 2:
--- Find the average rental duration (in days) of movies rented from the Sakila database.
--- Hint: Utilize the AVG() function.

SELECT AVG(rental_duration) AS average_rental_duration
FROM film;


--- String Functions:
---- Question 3:
--- Display the first name and last name of customers in uppercase.
--- Hint: Use the UPPER () function.


SELECT UPPER(first_name) AS uppercase_first_name, UPPER(last_name) AS uppercase_last_name
FROM customer;


--- Question 4:
--- Extract the month from the rental date and display it alongside the rental ID.
--- Hint: Employ the MONTH() function.


SELECT rental_id, MONTH(rental_date) AS rental_month
FROM rental;


--- GROUP BY:
--- Question 5: 
--- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
--- Hint: Use COUNT () in conjunction with GROUP BY.

SELECT customer_id, COUNT(rental_id) AS rental_count
FROM rental
GROUP BY customer_id;


--- Question 6:
--- Find the total revenue generated by each store.
--- Hint: Combine SUM() and GROUP BY.

SELECT
    store.store_id,
    SUM(payment.amount) AS total_revenue
FROM
    store
JOIN
    staff ON store.store_id = staff.store_id
JOIN
    payment ON staff.staff_id = payment.staff_id
GROUP BY
    store.store_id;


---- Joins:
--- Question 7:
--- Display the title of the movie, customer s first name, and last name who rented it.
--- Hint: Use JOIN between the film, inventory, rental, and customer tables.

SELECT 
    film.title AS movie_title,
    customer.first_name,
    customer.last_name
FROM 
    rental
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    film ON inventory.film_id = film.film_id
JOIN 
    customer ON rental.customer_id = customer.customer_id;


---- Question 8:
--- Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
--- Hint: Use JOIN between the film actor, film, and actor tables.

SELECT 
    actor.first_name,
    actor.last_name
FROM 
    actor
JOIN 
    film_actor ON film_actor.actor_id = actor.actor_id
JOIN 
    film ON film_actor.film_id = film.film_id
WHERE 
    film.title = 'Gone with the Wind';   --- (MOVIE NAME NOT PRESENT IN DATABASE)





--- GROUP BY:
--- Question 1:
--- Determine the total number of rentals for each category of movies.
--- Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.

SELECT 
    category.name AS category_name,
    COUNT(rental.rental_id) AS rental_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
LEFT JOIN inventory ON film.film_id = inventory.film_id
LEFT JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category_name;



--- Question 2:
--- Find the average rental rate of movies in each language.
--- Hint: JOIN film and language tables, then use AVG () and GROUP BY.

SELECT 
    language.name AS language_name,
    AVG(film.rental_rate) AS avg_rental_rate
FROM 
    language
JOIN 
    film ON language.language_id = film.language_id
GROUP BY 
    language_name;


--- Joins:
--- Question 3:
--- Retrieve the customer names along with the total amount they Have spent on rentals.
--- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.


SELECT 
    customer.customer_id,
    CONCAT(customer.first_name, ' ', customer.last_name) AS customer_name,
    SUM(payment.amount) AS total_amount_spent
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
JOIN rental ON payment.rental_id = rental.rental_id
GROUP BY 
    customer.customer_id, customer_name;



---- Question 4:
--- List the titles of movies rented by each customer in a particular city (e.g., 'London').
--- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.

SELECT customer.customer_id, CONCAT(customer.first_name, ' ', customer.last_name) AS customer_name, city.city, film.title
FROM  customer
JOIN  address ON customer.address_id = address.address_id
JOIN  city ON address.city_id = city.city_id
JOIN  rental ON customer.customer_id = rental.customer_id
JOIN  inventory ON rental.inventory_id = inventory.inventory_id
JOIN  film ON inventory.film_id = film.film_id
WHERE city.city = 'London'
ORDER BY customer.customer_id, film.title;



---- Advanced Joins and GROUP BY:
---- Question 5:
--- Display the top 5 rented movies along with the number of times they have been rented.
---- Hint: JOIN film, inventory, and rental tables, then use cOUNT() and GROUP BY, and limit the results.

SELECT 
    film.film_id,
    film.title,
    COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id, film.title
ORDER BY rental_count DESC
LIMIT 5;


---- Question 6:
---- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
---- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

SELECT customer.customer_id, customer.first_name, customer.last_name
FROM  customer
JOIN 
    rental ON customer.customer_id = rental.customer_id
JOIN 
    inventory ON rental.inventory_id = inventory.inventory_id
JOIN 
    store ON inventory.store_id = store.store_id
WHERE store.store_id IN (1, 2)
GROUP BY customer.customer_id, customer.first_name, customer.last_name
HAVING COUNT(DISTINCT store.store_id) = 2;
